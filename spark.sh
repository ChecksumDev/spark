#!/bin/bash
#    _____                  __
#   / ___/____  ____ ______/ /__
#   \__ \/ __ \/ __ `/ ___/ //_/
#  ___/ / /_/ / /_/ / /  / ,<
# /____/ .___/\__,_/_/  /_/|_|
#     /_/ v 1.1.0
#
# Copyright (c) 2021 ChecksumDev.
# Licensed under the GNU GPLv3.

# globals
COUNT=0
VERSION=1.1.0

# colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# check if the user is root
if [ "$(id -u)" != "0" ]; then
    echo -e "$RED> You must be root to run this script, please use root to generate the mirrors."
    exit 1
fi

# check if apt is installed
if [ ! -f /usr/bin/apt ]; then
    echo -e "$RED> This distribution is not supported by this script."
    exit 1
fi

# check if there is an internet connection
if [ -z "$(ping -c 1 -W 1 1.1.1.1)" ]; then
    echo -e "$RED> No internet connection detected, please connect to the internet and run this script again$NC"
    exit 1
fi

# check if curl is installed
if [ ! -f /usr/bin/curl ]; then
    echo "curl is not installed, installing.."
    apt-get install curl -y
    if [ $? -ne 0 ]; then
        echo -e "$RED> curl failed to install, please install curl and run this script again."
        exit 1
    fi
fi

# check if wget is installed
if [ ! -x "$(command -v wget)" ]; then
    # install wget
    echo -e "$MAGENTA> Installing wget$NC"
    apt-get install -y wget
    if [ $? -ne 0 ]; then
        echo "$RED> wget failed to install, please install wget and run this script again$NC"
        exit 1
    fi
fi

echo -e "$YELLOW> Running spark.sh (v$VERSION)$NC"

# if spark is out of date, update it via github
if [ "$(curl -s https://api.github.com/repos/ChecksumDev/spark/releases/latest | grep 'tag_name' | cut -d '"' -f 4)" != "$VERSION" ]; then
    # update the script by downloading the latest version
    echo -e "$MAGENTA> spark.sh is out of date, updating...$NC"
    curl -s https://api.github.com/repos/ChecksumDev/spark/releases/latest | grep 'browser_download_url' | cut -d '"' -f 4 | xargs -I {} curl -L {} -o spark.sh
    chmod +x spark.sh

    echo -e "$GREEN> Done updating, restarting the process!$NC"
    bash spark.sh $1

    exit 0
fi

# skip startup prompt when the noprompt bash option is set
if [[ "$1" = "--noprompt" ]]; then
    echo "" >>/dev/null
else
    echo "> This script will generate mirrors for debian and replace the existing /etc/apt/sources.list"
    echo "> You might want to backup the old sources.list first before running this"
    echo ""
    echo -e -n "> Do you want to continue? [y/n] $YELLOW"
    read continue
    if [ "$continue" != "y" ]; then
        exit 1
    fi
fi

echo -e "$NC"

# delete the old sources.list
echo -e "$MAGENTA> Deleting sources.list$NC"
rm -f /etc/apt/sources.list

echo "#   _____                  __  " >>/etc/apt/sources.list
echo "#  / ___/____  ____ ______/ /__" >>/etc/apt/sources.list
echo "#  \__ \/ __ \/ __ / ___/ / /_/" >>/etc/apt/sources.list
echo -e "#  ___/ / /_/ / /_/ / /  / \`,<" >>/etc/apt/sources.list
echo "# /____/ .___/\__,_/_/  /_/|_|" >>/etc/apt/sources.list
echo "#     /_/" >>/etc/apt/sources.list
echo "#" >>/etc/apt/sources.list
echo "# This sources.list was generated by spark.sh!" >>/etc/apt/sources.list
echo "# Check us out on https://github.com/ChecksumDev/spark" >>/etc/apt/sources.list
echo "" >>/etc/apt/sources.list

echo -e "$GREEN> Generating mirror list.$NC"

DISTRO=$(lsb_release -sc)
MIRRORS="$(wget -qO - mirrors.ubuntu.com/mirrors.txt)"
for i in $MIRRORS; do
    DOMAIN=$(echo $i | cut -d'/' -f3)

    # check if the mirror is available via pinging the domain.
    if [ -z "$(ping -c 1 -W 1 $DOMAIN)" ] >>/dev/null; then
        echo -e "$RED > Mirror $DOMAIN is not available$NC"
        count=$(($count + 1))
        continue
    fi

    # stop after the first 15 mirrors
    if [ $((++max)) -gt $((COUNT + 15)) ]; then
        break
    fi

    echo "deb $i $DISTRO main restricted universe multiverse" >>/etc/apt/sources.list
    echo -e "$GREEN> The mirror $DOMAIN was added to /etc/apt/sources.list$NC"
done

echo -e "$NC"
echo -e "$GREEN> Success!$NC"
